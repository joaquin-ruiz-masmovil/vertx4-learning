plugins {
  id 'java'
  id 'application'
  id 'com.github.johnrengelman.shadow' version '6.1.0'
}

group = "com.masmovil"
version = "1.0.0-SNAPSHOT"
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
  mavenCentral()
}

ext {
  vertxVersion = "4.0.2"
  junitJupiterVersion = "5.7.0"

  mainVerticleName = "com.masmovil.phoneapp.MainVerticle"
  launcherClassName = "io.vertx.core.Launcher"
}

application {
  mainClassName = launcherClassName
}

dependencies {
  implementation(platform("io.vertx:vertx-stack-depchain:$vertxVersion"))
  implementation "io.vertx:vertx-web-client"
  implementation "io.vertx:vertx-rx-java2"
  implementation "io.vertx:vertx-web"
  implementation "io.vertx:vertx-json-schema"

  // Vert.x Config
  compile "io.vertx:vertx-config"
  compile "io.vertx:vertx-config-yaml"

  // String Utils
  implementation "org.apache.commons:commons-lang3:3.11"

  // Preconditions
  implementation "com.google.guava:guava:23.0"

  testImplementation "io.vertx:vertx-junit5"
  testImplementation "org.junit.jupiter:junit-jupiter:$junitJupiterVersion"
}

shadowJar {
  archiveClassifier.set("fat")
  manifest {
    attributes 'Main-Verticle': mainVerticleName
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << '-Xlint:unchecked'
  options.deprecation = true
}

test {
  useJUnitPlatform()
}

tasks.withType(Test) {
  reports.html.destination = file("${reporting.baseDir}/${name}")

  testLogging {
    // set options for log level LIFECYCLE
    events "skipped", "failed", "standardOut"
    showExceptions true
    exceptionFormat "short"
    showCauses true
    showStackTraces true

    info.events = debug.events
    info.exceptionFormat = debug.exceptionFormat

    afterSuite { desc, result ->
      if (!desc.parent) {
        def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
        def startItem = '|  ', endItem = '  |'
        def repeatLength = startItem.length() + output.length() + endItem.length()
        println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
      }
    }
  }
}

run {
  args = ['run', mainVerticleName,
          "--launcher-class=$launcherClassName",
          "--redeploy=src/**/*.*",
          "--on-redeploy=./gradlew classes"
  ]
}
